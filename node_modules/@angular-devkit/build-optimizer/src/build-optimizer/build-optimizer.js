"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const fs_1 = require("fs");
const transform_javascript_1 = require("../helpers/transform-javascript");
const class_fold_1 = require("../transforms/class-fold");
const import_tslib_1 = require("../transforms/import-tslib");
const prefix_classes_1 = require("../transforms/prefix-classes");
const prefix_functions_1 = require("../transforms/prefix-functions");
const scrub_file_1 = require("../transforms/scrub-file");
const wrap_enums_1 = require("../transforms/wrap-enums");
const whitelistedAngularModules = [
    /[\\\/]node_modules[\\\/]@angular[\\\/]animations[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]common[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]compiler[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]core[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]forms[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]http[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]platform-browser-dynamic[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]platform-browser[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]platform-webworker-dynamic[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]platform-webworker[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]router[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]upgrade[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]material[\\\/]/,
    /[\\\/]node_modules[\\\/]@angular[\\\/]cdk[\\\/]/,
];
const es5AngularModules = [
    // Angular 4 packaging format has .es5.js as the extension.
    /.es5.js$/,
    // Angular 5 has esm5 folders.
    /[\\\/]node_modules[\\\/]@angular[\\\/][^\\/][\\\/]esm5[\\\/]/,
    // All Angular versions have UMD with es5.
    /.umd.js$/,
];
function buildOptimizer(options) {
    const { inputFilePath } = options;
    let { content } = options;
    if (!inputFilePath && content === undefined) {
        throw new Error('Either filePath or content must be specified in options.');
    }
    if (content === undefined) {
        content = fs_1.readFileSync(inputFilePath, 'UTF-8');
    }
    // Determine which transforms to apply.
    const getTransforms = [];
    if (wrap_enums_1.testWrapEnums(content)) {
        getTransforms.push(wrap_enums_1.getWrapEnumsTransformer);
    }
    if (import_tslib_1.testImportTslib(content)) {
        getTransforms.push(import_tslib_1.getImportTslibTransformer);
    }
    if (prefix_classes_1.testPrefixClasses(content)) {
        getTransforms.push(prefix_classes_1.getPrefixClassesTransformer);
    }
    if (inputFilePath
        && whitelistedAngularModules.some((re) => re.test(inputFilePath))
        && es5AngularModules.some((re) => re.test(inputFilePath))) {
        getTransforms.push(
        // getPrefixFunctionsTransformer is rather dangerous, apply only to known pure es5 modules.
        // It will mark both `require()` calls and `console.log(stuff)` as pure.
        // We only apply it to whitelisted modules, since we know they are safe.
        // getPrefixFunctionsTransformer needs to be before getFoldFileTransformer.
        prefix_functions_1.getPrefixFunctionsTransformer, scrub_file_1.getScrubFileTransformer, class_fold_1.getFoldFileTransformer);
    }
    else if (scrub_file_1.testScrubFile(content)) {
        getTransforms.push(scrub_file_1.getScrubFileTransformer, class_fold_1.getFoldFileTransformer);
    }
    return transform_javascript_1.transformJavascript(Object.assign({}, options, { getTransforms, content }));
}
exports.buildOptimizer = buildOptimizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtb3B0aW1pemVyLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW5zbC9Tb3VyY2VzL2RldmtpdC8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX29wdGltaXplci9zcmMvYnVpbGQtb3B0aW1pemVyL2J1aWxkLW9wdGltaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILDJCQUFrQztBQUNsQywwRUFBaUc7QUFDakcseURBQWtFO0FBQ2xFLDZEQUF3RjtBQUN4RixpRUFBOEY7QUFDOUYscUVBQStFO0FBQy9FLHlEQUFrRjtBQUNsRix5REFBa0Y7QUFHbEYsTUFBTSx5QkFBeUIsR0FBRztJQUNoQyx3REFBd0Q7SUFDeEQsb0RBQW9EO0lBQ3BELHNEQUFzRDtJQUN0RCxrREFBa0Q7SUFDbEQsbURBQW1EO0lBQ25ELGtEQUFrRDtJQUNsRCxzRUFBc0U7SUFDdEUsOERBQThEO0lBQzlELHdFQUF3RTtJQUN4RSxnRUFBZ0U7SUFDaEUsb0RBQW9EO0lBQ3BELHFEQUFxRDtJQUNyRCxzREFBc0Q7SUFDdEQsaURBQWlEO0NBQ2xELENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLDJEQUEyRDtJQUMzRCxVQUFVO0lBQ1YsOEJBQThCO0lBQzlCLDhEQUE4RDtJQUM5RCwwQ0FBMEM7SUFDMUMsVUFBVTtDQUNYLENBQUM7QUFVRix3QkFBK0IsT0FBOEI7SUFFM0QsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUNsQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRTFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBTyxHQUFHLGlCQUFZLENBQUMsYUFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUV6QixFQUFFLENBQUMsQ0FBQywwQkFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixhQUFhLENBQUMsSUFBSSxDQUFDLG9DQUF1QixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELEVBQUUsQ0FBQyxDQUFDLDhCQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxJQUFJLENBQUMsd0NBQXlCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsa0NBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLGFBQWEsQ0FBQyxJQUFJLENBQUMsNENBQTJCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsYUFBYTtXQUNaLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1dBQzlELGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUMxRCxDQUFDLENBQUMsQ0FBQztRQUNELGFBQWEsQ0FBQyxJQUFJO1FBQ2hCLDJGQUEyRjtRQUMzRix3RUFBd0U7UUFDeEUsd0VBQXdFO1FBQ3hFLDJFQUEyRTtRQUMzRSxnREFBNkIsRUFDN0Isb0NBQXVCLEVBQ3ZCLG1DQUFzQixDQUN2QixDQUFDO0lBQ0osQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQywwQkFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxhQUFhLENBQUMsSUFBSSxDQUNoQixvQ0FBdUIsRUFDdkIsbUNBQXNCLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLDBDQUFtQixtQkFBTSxPQUFPLElBQUUsYUFBYSxFQUFFLE9BQU8sSUFBRyxDQUFDO0FBQ3JFLENBQUM7QUFqREQsd0NBaURDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgVHJhbnNmb3JtSmF2YXNjcmlwdE91dHB1dCwgdHJhbnNmb3JtSmF2YXNjcmlwdCB9IGZyb20gJy4uL2hlbHBlcnMvdHJhbnNmb3JtLWphdmFzY3JpcHQnO1xuaW1wb3J0IHsgZ2V0Rm9sZEZpbGVUcmFuc2Zvcm1lciB9IGZyb20gJy4uL3RyYW5zZm9ybXMvY2xhc3MtZm9sZCc7XG5pbXBvcnQgeyBnZXRJbXBvcnRUc2xpYlRyYW5zZm9ybWVyLCB0ZXN0SW1wb3J0VHNsaWIgfSBmcm9tICcuLi90cmFuc2Zvcm1zL2ltcG9ydC10c2xpYic7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbGFzc2VzVHJhbnNmb3JtZXIsIHRlc3RQcmVmaXhDbGFzc2VzIH0gZnJvbSAnLi4vdHJhbnNmb3Jtcy9wcmVmaXgtY2xhc3Nlcyc7XG5pbXBvcnQgeyBnZXRQcmVmaXhGdW5jdGlvbnNUcmFuc2Zvcm1lciB9IGZyb20gJy4uL3RyYW5zZm9ybXMvcHJlZml4LWZ1bmN0aW9ucyc7XG5pbXBvcnQgeyBnZXRTY3J1YkZpbGVUcmFuc2Zvcm1lciwgdGVzdFNjcnViRmlsZSB9IGZyb20gJy4uL3RyYW5zZm9ybXMvc2NydWItZmlsZSc7XG5pbXBvcnQgeyBnZXRXcmFwRW51bXNUcmFuc2Zvcm1lciwgdGVzdFdyYXBFbnVtcyB9IGZyb20gJy4uL3RyYW5zZm9ybXMvd3JhcC1lbnVtcyc7XG5cblxuY29uc3Qgd2hpdGVsaXN0ZWRBbmd1bGFyTW9kdWxlcyA9IFtcbiAgL1tcXFxcXFwvXW5vZGVfbW9kdWxlc1tcXFxcXFwvXUBhbmd1bGFyW1xcXFxcXC9dYW5pbWF0aW9uc1tcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXWNvbW1vbltcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXWNvbXBpbGVyW1xcXFxcXC9dLyxcbiAgL1tcXFxcXFwvXW5vZGVfbW9kdWxlc1tcXFxcXFwvXUBhbmd1bGFyW1xcXFxcXC9dY29yZVtcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXWZvcm1zW1xcXFxcXC9dLyxcbiAgL1tcXFxcXFwvXW5vZGVfbW9kdWxlc1tcXFxcXFwvXUBhbmd1bGFyW1xcXFxcXC9daHR0cFtcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXXBsYXRmb3JtLWJyb3dzZXItZHluYW1pY1tcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXXBsYXRmb3JtLWJyb3dzZXJbXFxcXFxcL10vLFxuICAvW1xcXFxcXC9dbm9kZV9tb2R1bGVzW1xcXFxcXC9dQGFuZ3VsYXJbXFxcXFxcL11wbGF0Zm9ybS13ZWJ3b3JrZXItZHluYW1pY1tcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXXBsYXRmb3JtLXdlYndvcmtlcltcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXXJvdXRlcltcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXXVwZ3JhZGVbXFxcXFxcL10vLFxuICAvW1xcXFxcXC9dbm9kZV9tb2R1bGVzW1xcXFxcXC9dQGFuZ3VsYXJbXFxcXFxcL11tYXRlcmlhbFtcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL11ub2RlX21vZHVsZXNbXFxcXFxcL11AYW5ndWxhcltcXFxcXFwvXWNka1tcXFxcXFwvXS8sXG5dO1xuXG5jb25zdCBlczVBbmd1bGFyTW9kdWxlcyA9IFtcbiAgLy8gQW5ndWxhciA0IHBhY2thZ2luZyBmb3JtYXQgaGFzIC5lczUuanMgYXMgdGhlIGV4dGVuc2lvbi5cbiAgLy5lczUuanMkLywgLy8gQW5ndWxhciA0XG4gIC8vIEFuZ3VsYXIgNSBoYXMgZXNtNSBmb2xkZXJzLlxuICAvW1xcXFxcXC9dbm9kZV9tb2R1bGVzW1xcXFxcXC9dQGFuZ3VsYXJbXFxcXFxcL11bXlxcXFwvXVtcXFxcXFwvXWVzbTVbXFxcXFxcL10vLFxuICAvLyBBbGwgQW5ndWxhciB2ZXJzaW9ucyBoYXZlIFVNRCB3aXRoIGVzNS5cbiAgLy51bWQuanMkLyxcbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRPcHRpbWl6ZXJPcHRpb25zIHtcbiAgY29udGVudD86IHN0cmluZztcbiAgaW5wdXRGaWxlUGF0aD86IHN0cmluZztcbiAgb3V0cHV0RmlsZVBhdGg/OiBzdHJpbmc7XG4gIGVtaXRTb3VyY2VNYXA/OiBib29sZWFuO1xuICBzdHJpY3Q/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRPcHRpbWl6ZXIob3B0aW9uczogQnVpbGRPcHRpbWl6ZXJPcHRpb25zKTogVHJhbnNmb3JtSmF2YXNjcmlwdE91dHB1dCB7XG5cbiAgY29uc3QgeyBpbnB1dEZpbGVQYXRoIH0gPSBvcHRpb25zO1xuICBsZXQgeyBjb250ZW50IH0gPSBvcHRpb25zO1xuXG4gIGlmICghaW5wdXRGaWxlUGF0aCAmJiBjb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VpdGhlciBmaWxlUGF0aCBvciBjb250ZW50IG11c3QgYmUgc3BlY2lmaWVkIGluIG9wdGlvbnMuJyk7XG4gIH1cblxuICBpZiAoY29udGVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29udGVudCA9IHJlYWRGaWxlU3luYyhpbnB1dEZpbGVQYXRoIGFzIHN0cmluZywgJ1VURi04Jyk7XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgd2hpY2ggdHJhbnNmb3JtcyB0byBhcHBseS5cbiAgY29uc3QgZ2V0VHJhbnNmb3JtcyA9IFtdO1xuXG4gIGlmICh0ZXN0V3JhcEVudW1zKGNvbnRlbnQpKSB7XG4gICAgZ2V0VHJhbnNmb3Jtcy5wdXNoKGdldFdyYXBFbnVtc1RyYW5zZm9ybWVyKTtcbiAgfVxuXG4gIGlmICh0ZXN0SW1wb3J0VHNsaWIoY29udGVudCkpIHtcbiAgICBnZXRUcmFuc2Zvcm1zLnB1c2goZ2V0SW1wb3J0VHNsaWJUcmFuc2Zvcm1lcik7XG4gIH1cblxuICBpZiAodGVzdFByZWZpeENsYXNzZXMoY29udGVudCkpIHtcbiAgICBnZXRUcmFuc2Zvcm1zLnB1c2goZ2V0UHJlZml4Q2xhc3Nlc1RyYW5zZm9ybWVyKTtcbiAgfVxuXG4gIGlmIChpbnB1dEZpbGVQYXRoXG4gICAgJiYgd2hpdGVsaXN0ZWRBbmd1bGFyTW9kdWxlcy5zb21lKChyZSkgPT4gcmUudGVzdChpbnB1dEZpbGVQYXRoKSlcbiAgICAmJiBlczVBbmd1bGFyTW9kdWxlcy5zb21lKChyZSkgPT4gcmUudGVzdChpbnB1dEZpbGVQYXRoKSlcbiAgKSB7XG4gICAgZ2V0VHJhbnNmb3Jtcy5wdXNoKFxuICAgICAgLy8gZ2V0UHJlZml4RnVuY3Rpb25zVHJhbnNmb3JtZXIgaXMgcmF0aGVyIGRhbmdlcm91cywgYXBwbHkgb25seSB0byBrbm93biBwdXJlIGVzNSBtb2R1bGVzLlxuICAgICAgLy8gSXQgd2lsbCBtYXJrIGJvdGggYHJlcXVpcmUoKWAgY2FsbHMgYW5kIGBjb25zb2xlLmxvZyhzdHVmZilgIGFzIHB1cmUuXG4gICAgICAvLyBXZSBvbmx5IGFwcGx5IGl0IHRvIHdoaXRlbGlzdGVkIG1vZHVsZXMsIHNpbmNlIHdlIGtub3cgdGhleSBhcmUgc2FmZS5cbiAgICAgIC8vIGdldFByZWZpeEZ1bmN0aW9uc1RyYW5zZm9ybWVyIG5lZWRzIHRvIGJlIGJlZm9yZSBnZXRGb2xkRmlsZVRyYW5zZm9ybWVyLlxuICAgICAgZ2V0UHJlZml4RnVuY3Rpb25zVHJhbnNmb3JtZXIsXG4gICAgICBnZXRTY3J1YkZpbGVUcmFuc2Zvcm1lcixcbiAgICAgIGdldEZvbGRGaWxlVHJhbnNmb3JtZXIsXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0ZXN0U2NydWJGaWxlKGNvbnRlbnQpKSB7XG4gICAgZ2V0VHJhbnNmb3Jtcy5wdXNoKFxuICAgICAgZ2V0U2NydWJGaWxlVHJhbnNmb3JtZXIsXG4gICAgICBnZXRGb2xkRmlsZVRyYW5zZm9ybWVyLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHJhbnNmb3JtSmF2YXNjcmlwdCh7IC4uLm9wdGlvbnMsIGdldFRyYW5zZm9ybXMsIGNvbnRlbnQgfSk7XG59XG4iXX0=